// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CancelOrderParams is parameters of cancelOrder operation.
type CancelOrderParams struct {
	OrderID uuid.UUID
}

func unpackCancelOrderParams(packed middleware.Parameters) (params CancelOrderParams) {
	{
		key := middleware.ParameterKey{
			Name: "order_id",
			In:   "path",
		}
		params.OrderID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCancelOrderParams(args [1]string, argsEscaped bool, r *http.Request) (params CancelOrderParams, _ error) {
	// Decode path: order_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "order_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.OrderID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteOrderParams is parameters of deleteOrder operation.
type DeleteOrderParams struct {
	OrderID uuid.UUID
}

func unpackDeleteOrderParams(packed middleware.Parameters) (params DeleteOrderParams) {
	{
		key := middleware.ParameterKey{
			Name: "order_id",
			In:   "path",
		}
		params.OrderID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteOrderParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteOrderParams, _ error) {
	// Decode path: order_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "order_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.OrderID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrderParams is parameters of getOrder operation.
type GetOrderParams struct {
	OrderID uuid.UUID
}

func unpackGetOrderParams(packed middleware.Parameters) (params GetOrderParams) {
	{
		key := middleware.ParameterKey{
			Name: "order_id",
			In:   "path",
		}
		params.OrderID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetOrderParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOrderParams, _ error) {
	// Decode path: order_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "order_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.OrderID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrdersParams is parameters of getOrders operation.
type GetOrdersParams struct {
	Cancelled OptBool
	Limit     OptInt
}

func unpackGetOrdersParams(packed middleware.Parameters) (params GetOrdersParams) {
	{
		key := middleware.ParameterKey{
			Name: "cancelled",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Cancelled = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeGetOrdersParams(args [0]string, argsEscaped bool, r *http.Request) (params GetOrdersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: cancelled.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cancelled",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCancelledVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotCancelledVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Cancelled.SetTo(paramsDotCancelledVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cancelled",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PayOrderParams is parameters of payOrder operation.
type PayOrderParams struct {
	OrderID uuid.UUID
}

func unpackPayOrderParams(packed middleware.Parameters) (params PayOrderParams) {
	{
		key := middleware.ParameterKey{
			Name: "order_id",
			In:   "path",
		}
		params.OrderID = packed[key].(uuid.UUID)
	}
	return params
}

func decodePayOrderParams(args [1]string, argsEscaped bool, r *http.Request) (params PayOrderParams, _ error) {
	// Decode path: order_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "order_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.OrderID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrderParams is parameters of updateOrder operation.
type UpdateOrderParams struct {
	OrderID uuid.UUID
}

func unpackUpdateOrderParams(packed middleware.Parameters) (params UpdateOrderParams) {
	{
		key := middleware.ParameterKey{
			Name: "order_id",
			In:   "path",
		}
		params.OrderID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateOrderParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateOrderParams, _ error) {
	// Decode path: order_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "order_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.OrderID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "order_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
