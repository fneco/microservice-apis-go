// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type CancelOrderNotFound Error

func (*CancelOrderNotFound) cancelOrderRes() {}

type CancelOrderUnprocessableEntity Error

func (*CancelOrderUnprocessableEntity) cancelOrderRes() {}

// Ref: #/components/schemas/CreateOrderSchema
type CreateOrderSchema struct {
	Order []OrderItemSchema `json:"order"`
}

// GetOrder returns the value of Order.
func (s *CreateOrderSchema) GetOrder() []OrderItemSchema {
	return s.Order
}

// SetOrder sets the value of Order.
func (s *CreateOrderSchema) SetOrder(val []OrderItemSchema) {
	s.Order = val
}

// DeleteOrderNoContent is response for DeleteOrder operation.
type DeleteOrderNoContent struct{}

func (*DeleteOrderNoContent) deleteOrderRes() {}

type DeleteOrderNotFound Error

func (*DeleteOrderNotFound) deleteOrderRes() {}

type DeleteOrderUnprocessableEntity Error

func (*DeleteOrderUnprocessableEntity) deleteOrderRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Detail ErrorDetail `json:"detail"`
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() ErrorDetail {
	return s.Detail
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val ErrorDetail) {
	s.Detail = val
}

func (*Error) createOrderRes() {}
func (*Error) getOrdersRes()   {}

// ErrorDetail represents sum type.
type ErrorDetail struct {
	Type        ErrorDetailType // switch on this field
	String      string
	StringArray []string
}

// ErrorDetailType is oneOf type of ErrorDetail.
type ErrorDetailType string

// Possible values for ErrorDetailType.
const (
	StringErrorDetail      ErrorDetailType = "string"
	StringArrayErrorDetail ErrorDetailType = "[]string"
)

// IsString reports whether ErrorDetail is string.
func (s ErrorDetail) IsString() bool { return s.Type == StringErrorDetail }

// IsStringArray reports whether ErrorDetail is []string.
func (s ErrorDetail) IsStringArray() bool { return s.Type == StringArrayErrorDetail }

// SetString sets ErrorDetail to string.
func (s *ErrorDetail) SetString(v string) {
	s.Type = StringErrorDetail
	s.String = v
}

// GetString returns string and true boolean if ErrorDetail is string.
func (s ErrorDetail) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringErrorDetail returns new ErrorDetail from string.
func NewStringErrorDetail(v string) ErrorDetail {
	var s ErrorDetail
	s.SetString(v)
	return s
}

// SetStringArray sets ErrorDetail to []string.
func (s *ErrorDetail) SetStringArray(v []string) {
	s.Type = StringArrayErrorDetail
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ErrorDetail is []string.
func (s ErrorDetail) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayErrorDetail returns new ErrorDetail from []string.
func NewStringArrayErrorDetail(v []string) ErrorDetail {
	var s ErrorDetail
	s.SetStringArray(v)
	return s
}

type GetOrderNotFound Error

func (*GetOrderNotFound) getOrderRes() {}

// Ref: #/components/schemas/GetOrderSchema
type GetOrderSchema struct {
	ID      uuid.UUID            `json:"id"`
	Created time.Time            `json:"created"`
	Status  GetOrderSchemaStatus `json:"status"`
	Order   []OrderItemSchema    `json:"order"`
}

// GetID returns the value of ID.
func (s *GetOrderSchema) GetID() uuid.UUID {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *GetOrderSchema) GetCreated() time.Time {
	return s.Created
}

// GetStatus returns the value of Status.
func (s *GetOrderSchema) GetStatus() GetOrderSchemaStatus {
	return s.Status
}

// GetOrder returns the value of Order.
func (s *GetOrderSchema) GetOrder() []OrderItemSchema {
	return s.Order
}

// SetID sets the value of ID.
func (s *GetOrderSchema) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *GetOrderSchema) SetCreated(val time.Time) {
	s.Created = val
}

// SetStatus sets the value of Status.
func (s *GetOrderSchema) SetStatus(val GetOrderSchemaStatus) {
	s.Status = val
}

// SetOrder sets the value of Order.
func (s *GetOrderSchema) SetOrder(val []OrderItemSchema) {
	s.Order = val
}

func (*GetOrderSchema) cancelOrderRes() {}
func (*GetOrderSchema) createOrderRes() {}
func (*GetOrderSchema) getOrderRes()    {}
func (*GetOrderSchema) payOrderRes()    {}
func (*GetOrderSchema) updateOrderRes() {}

type GetOrderSchemaStatus string

const (
	GetOrderSchemaStatusCreated    GetOrderSchemaStatus = "created"
	GetOrderSchemaStatusPaid       GetOrderSchemaStatus = "paid"
	GetOrderSchemaStatusProgress   GetOrderSchemaStatus = "progress"
	GetOrderSchemaStatusCancelled  GetOrderSchemaStatus = "cancelled"
	GetOrderSchemaStatusDispatched GetOrderSchemaStatus = "dispatched"
	GetOrderSchemaStatusDelivered  GetOrderSchemaStatus = "delivered"
)

// AllValues returns all GetOrderSchemaStatus values.
func (GetOrderSchemaStatus) AllValues() []GetOrderSchemaStatus {
	return []GetOrderSchemaStatus{
		GetOrderSchemaStatusCreated,
		GetOrderSchemaStatusPaid,
		GetOrderSchemaStatusProgress,
		GetOrderSchemaStatusCancelled,
		GetOrderSchemaStatusDispatched,
		GetOrderSchemaStatusDelivered,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetOrderSchemaStatus) MarshalText() ([]byte, error) {
	switch s {
	case GetOrderSchemaStatusCreated:
		return []byte(s), nil
	case GetOrderSchemaStatusPaid:
		return []byte(s), nil
	case GetOrderSchemaStatusProgress:
		return []byte(s), nil
	case GetOrderSchemaStatusCancelled:
		return []byte(s), nil
	case GetOrderSchemaStatusDispatched:
		return []byte(s), nil
	case GetOrderSchemaStatusDelivered:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetOrderSchemaStatus) UnmarshalText(data []byte) error {
	switch GetOrderSchemaStatus(data) {
	case GetOrderSchemaStatusCreated:
		*s = GetOrderSchemaStatusCreated
		return nil
	case GetOrderSchemaStatusPaid:
		*s = GetOrderSchemaStatusPaid
		return nil
	case GetOrderSchemaStatusProgress:
		*s = GetOrderSchemaStatusProgress
		return nil
	case GetOrderSchemaStatusCancelled:
		*s = GetOrderSchemaStatusCancelled
		return nil
	case GetOrderSchemaStatusDispatched:
		*s = GetOrderSchemaStatusDispatched
		return nil
	case GetOrderSchemaStatusDelivered:
		*s = GetOrderSchemaStatusDelivered
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetOrderUnprocessableEntity Error

func (*GetOrderUnprocessableEntity) getOrderRes() {}

type GetOrdersOK struct {
	Orders []GetOrderSchema `json:"orders"`
}

// GetOrders returns the value of Orders.
func (s *GetOrdersOK) GetOrders() []GetOrderSchema {
	return s.Orders
}

// SetOrders sets the value of Orders.
func (s *GetOrdersOK) SetOrders(val []GetOrderSchema) {
	s.Orders = val
}

func (*GetOrdersOK) getOrdersRes() {}

type OAuth2 struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *OAuth2) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *OAuth2) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *OAuth2) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *OAuth2) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OrderItemSchema
type OrderItemSchema struct {
	Product  string              `json:"product"`
	Size     OrderItemSchemaSize `json:"size"`
	Quantity OptInt64            `json:"quantity"`
}

// GetProduct returns the value of Product.
func (s *OrderItemSchema) GetProduct() string {
	return s.Product
}

// GetSize returns the value of Size.
func (s *OrderItemSchema) GetSize() OrderItemSchemaSize {
	return s.Size
}

// GetQuantity returns the value of Quantity.
func (s *OrderItemSchema) GetQuantity() OptInt64 {
	return s.Quantity
}

// SetProduct sets the value of Product.
func (s *OrderItemSchema) SetProduct(val string) {
	s.Product = val
}

// SetSize sets the value of Size.
func (s *OrderItemSchema) SetSize(val OrderItemSchemaSize) {
	s.Size = val
}

// SetQuantity sets the value of Quantity.
func (s *OrderItemSchema) SetQuantity(val OptInt64) {
	s.Quantity = val
}

type OrderItemSchemaSize string

const (
	OrderItemSchemaSizeSmall  OrderItemSchemaSize = "small"
	OrderItemSchemaSizeMedium OrderItemSchemaSize = "medium"
	OrderItemSchemaSizeBig    OrderItemSchemaSize = "big"
)

// AllValues returns all OrderItemSchemaSize values.
func (OrderItemSchemaSize) AllValues() []OrderItemSchemaSize {
	return []OrderItemSchemaSize{
		OrderItemSchemaSizeSmall,
		OrderItemSchemaSizeMedium,
		OrderItemSchemaSizeBig,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderItemSchemaSize) MarshalText() ([]byte, error) {
	switch s {
	case OrderItemSchemaSizeSmall:
		return []byte(s), nil
	case OrderItemSchemaSizeMedium:
		return []byte(s), nil
	case OrderItemSchemaSizeBig:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderItemSchemaSize) UnmarshalText(data []byte) error {
	switch OrderItemSchemaSize(data) {
	case OrderItemSchemaSizeSmall:
		*s = OrderItemSchemaSizeSmall
		return nil
	case OrderItemSchemaSizeMedium:
		*s = OrderItemSchemaSizeMedium
		return nil
	case OrderItemSchemaSizeBig:
		*s = OrderItemSchemaSizeBig
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PayOrderNotFound Error

func (*PayOrderNotFound) payOrderRes() {}

type PayOrderUnprocessableEntity Error

func (*PayOrderUnprocessableEntity) payOrderRes() {}

type UpdateOrderNotFound Error

func (*UpdateOrderNotFound) updateOrderRes() {}

type UpdateOrderUnprocessableEntity Error

func (*UpdateOrderUnprocessableEntity) updateOrderRes() {}
