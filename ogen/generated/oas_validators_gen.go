// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CancelOrderNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CancelOrderUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *CreateOrderSchema) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Order == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.Order)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Order {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DeleteOrderNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteOrderUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Error) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Detail.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "detail",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ErrorDetail) Validate() error {
	switch s.Type {
	case StringErrorDetail:
		return nil // no validation needed
	case StringArrayErrorDetail:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *GetOrderNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetOrderSchema) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.Order == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.Order)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Order {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GetOrderSchemaStatus) Validate() error {
	switch s {
	case "created":
		return nil
	case "paid":
		return nil
	case "progress":
		return nil
	case "cancelled":
		return nil
	case "dispatched":
		return nil
	case "delivered":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetOrderUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetOrdersOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Orders {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "orders",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *OrderItemSchema) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Size.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "size",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Quantity.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           1000000,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s OrderItemSchemaSize) Validate() error {
	switch s {
	case "small":
		return nil
	case "medium":
		return nil
	case "big":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PayOrderNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PayOrderUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateOrderNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateOrderUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}
