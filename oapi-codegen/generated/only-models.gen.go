// Package onlymodels provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package onlymodels

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	Oauth2Scopes     = "oauth2.Scopes"
)

// Defines values for GetOrderSchemaStatus.
const (
	Cancelled  GetOrderSchemaStatus = "cancelled"
	Created    GetOrderSchemaStatus = "created"
	Delivered  GetOrderSchemaStatus = "delivered"
	Dispatched GetOrderSchemaStatus = "dispatched"
	Paid       GetOrderSchemaStatus = "paid"
	Progress   GetOrderSchemaStatus = "progress"
)

// Defines values for OrderItemSchemaSize.
const (
	Big    OrderItemSchemaSize = "big"
	Medium OrderItemSchemaSize = "medium"
	Small  OrderItemSchemaSize = "small"
)

// CreateOrderSchema defines model for CreateOrderSchema.
type CreateOrderSchema struct {
	Order []OrderItemSchema `json:"order"`
}

// Error defines model for Error.
type Error struct {
	Detail Error_Detail `json:"detail"`
}

// ErrorDetail0 defines model for .
type ErrorDetail0 = string

// ErrorDetail1 defines model for .
type ErrorDetail1 = []string

// Error_Detail defines model for Error.Detail.
type Error_Detail struct {
	union json.RawMessage
}

// GetOrderSchema defines model for GetOrderSchema.
type GetOrderSchema struct {
	Created time.Time            `json:"created"`
	Id      openapi_types.UUID   `json:"id"`
	Order   []OrderItemSchema    `json:"order"`
	Status  GetOrderSchemaStatus `json:"status"`
}

// GetOrderSchemaStatus defines model for GetOrderSchema.Status.
type GetOrderSchemaStatus string

// OrderItemSchema defines model for OrderItemSchema.
type OrderItemSchema struct {
	Product  string              `json:"product"`
	Quantity *int64              `json:"quantity,omitempty"`
	Size     OrderItemSchemaSize `json:"size"`
}

// OrderItemSchemaSize defines model for OrderItemSchema.Size.
type OrderItemSchemaSize string

// NotFound defines model for NotFound.
type NotFound = Error

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = Error

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	Cancelled *bool `form:"cancelled,omitempty" json:"cancelled,omitempty"`
	Limit     *int  `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = CreateOrderSchema

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody = CreateOrderSchema

// AsErrorDetail0 returns the union data inside the Error_Detail as a ErrorDetail0
func (t Error_Detail) AsErrorDetail0() (ErrorDetail0, error) {
	var body ErrorDetail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDetail0 overwrites any union data inside the Error_Detail as the provided ErrorDetail0
func (t *Error_Detail) FromErrorDetail0(v ErrorDetail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDetail0 performs a merge with any union data inside the Error_Detail, using the provided ErrorDetail0
func (t *Error_Detail) MergeErrorDetail0(v ErrorDetail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorDetail1 returns the union data inside the Error_Detail as a ErrorDetail1
func (t Error_Detail) AsErrorDetail1() (ErrorDetail1, error) {
	var body ErrorDetail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDetail1 overwrites any union data inside the Error_Detail as the provided ErrorDetail1
func (t *Error_Detail) FromErrorDetail1(v ErrorDetail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDetail1 performs a merge with any union data inside the Error_Detail, using the provided ErrorDetail1
func (t *Error_Detail) MergeErrorDetail1(v ErrorDetail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Error_Detail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Error_Detail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
