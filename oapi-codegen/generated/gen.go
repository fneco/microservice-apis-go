// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	Oauth2Scopes     = "oauth2.Scopes"
)

// Defines values for GetOrderSchemaStatus.
const (
	Cancelled  GetOrderSchemaStatus = "cancelled"
	Created    GetOrderSchemaStatus = "created"
	Delivered  GetOrderSchemaStatus = "delivered"
	Dispatched GetOrderSchemaStatus = "dispatched"
	Paid       GetOrderSchemaStatus = "paid"
	Progress   GetOrderSchemaStatus = "progress"
)

// Defines values for OrderItemSchemaSize.
const (
	Big    OrderItemSchemaSize = "big"
	Medium OrderItemSchemaSize = "medium"
	Small  OrderItemSchemaSize = "small"
)

// CreateOrderSchema defines model for CreateOrderSchema.
type CreateOrderSchema struct {
	Order []OrderItemSchema `json:"order"`
}

// Error defines model for Error.
type Error struct {
	Detail Error_Detail `json:"detail"`
}

// ErrorDetail0 defines model for .
type ErrorDetail0 = string

// ErrorDetail1 defines model for .
type ErrorDetail1 = []string

// Error_Detail defines model for Error.Detail.
type Error_Detail struct {
	union json.RawMessage
}

// GetOrderSchema defines model for GetOrderSchema.
type GetOrderSchema struct {
	Created time.Time            `json:"created"`
	Id      openapi_types.UUID   `json:"id"`
	Order   []OrderItemSchema    `json:"order"`
	Status  GetOrderSchemaStatus `json:"status"`
}

// GetOrderSchemaStatus defines model for GetOrderSchema.Status.
type GetOrderSchemaStatus string

// OrderItemSchema defines model for OrderItemSchema.
type OrderItemSchema struct {
	Product  string              `json:"product"`
	Quantity *int64              `json:"quantity,omitempty"`
	Size     OrderItemSchemaSize `json:"size"`
}

// OrderItemSchemaSize defines model for OrderItemSchema.Size.
type OrderItemSchemaSize string

// NotFound defines model for NotFound.
type NotFound = Error

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = Error

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	Cancelled *bool `form:"cancelled,omitempty" json:"cancelled,omitempty"`
	Limit     *int  `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = CreateOrderSchema

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody = CreateOrderSchema

// AsErrorDetail0 returns the union data inside the Error_Detail as a ErrorDetail0
func (t Error_Detail) AsErrorDetail0() (ErrorDetail0, error) {
	var body ErrorDetail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDetail0 overwrites any union data inside the Error_Detail as the provided ErrorDetail0
func (t *Error_Detail) FromErrorDetail0(v ErrorDetail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDetail0 performs a merge with any union data inside the Error_Detail, using the provided ErrorDetail0
func (t *Error_Detail) MergeErrorDetail0(v ErrorDetail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorDetail1 returns the union data inside the Error_Detail as a ErrorDetail1
func (t Error_Detail) AsErrorDetail1() (ErrorDetail1, error) {
	var body ErrorDetail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorDetail1 overwrites any union data inside the Error_Detail as the provided ErrorDetail1
func (t *Error_Detail) FromErrorDetail1(v ErrorDetail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorDetail1 performs a merge with any union data inside the Error_Detail, using the provided ErrorDetail1
func (t *Error_Detail) MergeErrorDetail1(v ErrorDetail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Error_Detail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Error_Detail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of orders
	// (GET /orders)
	GetOrders(c *gin.Context, params GetOrdersParams)
	// Creates an order
	// (POST /orders)
	CreateOrder(c *gin.Context)
	// Deletes an existing order
	// (DELETE /orders/{order_id})
	DeleteOrder(c *gin.Context, orderId openapi_types.UUID)
	// Returns the details of a specific order
	// (GET /orders/{order_id})
	GetOrder(c *gin.Context, orderId openapi_types.UUID)
	// Replaces an existing order
	// (PUT /orders/{order_id})
	UpdateOrder(c *gin.Context, orderId openapi_types.UUID)
	// Cancels an order
	// (POST /orders/{order_id}/cancel)
	CancelOrder(c *gin.Context, orderId openapi_types.UUID)
	// Processes payment for an order
	// (POST /orders/{order_id}/pay)
	PayOrder(c *gin.Context, orderId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *gin.Context) {

	var err error

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Optional query parameter "cancelled" -------------

	err = runtime.BindQueryParameter("form", true, false, "cancelled", c.Request.URL.Query(), &params.Cancelled)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cancelled: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrders(c, params)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *gin.Context) {

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrder(c)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrder(c, orderId)
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrder(c, orderId)
}

// UpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOrder(c, orderId)
}

// CancelOrder operation middleware
func (siw *ServerInterfaceWrapper) CancelOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelOrder(c, orderId)
}

// PayOrder operation middleware
func (siw *ServerInterfaceWrapper) PayOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(Oauth2Scopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	c.Set(BearerAuthScopes, []string{"getOrders", "createOrder", "getOrder", "updateOrder", "deleteOrder", "payOrder", "cancelOrder"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PayOrder(c, orderId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/orders", wrapper.GetOrders)
	router.POST(options.BaseURL+"/orders", wrapper.CreateOrder)
	router.DELETE(options.BaseURL+"/orders/:order_id", wrapper.DeleteOrder)
	router.GET(options.BaseURL+"/orders/:order_id", wrapper.GetOrder)
	router.PUT(options.BaseURL+"/orders/:order_id", wrapper.UpdateOrder)
	router.POST(options.BaseURL+"/orders/:order_id/cancel", wrapper.CancelOrder)
	router.POST(options.BaseURL+"/orders/:order_id/pay", wrapper.PayOrder)
}
