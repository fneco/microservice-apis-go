/*
Orders API

API that allows you to manage orders for CoffeeMesh

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the OrderItemSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderItemSchema{}

// OrderItemSchema struct for OrderItemSchema
type OrderItemSchema struct {
	Product string `json:"product"`
	Size string `json:"size"`
	Quantity *int64 `json:"quantity,omitempty"`
}

type _OrderItemSchema OrderItemSchema

// NewOrderItemSchema instantiates a new OrderItemSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderItemSchema(product string, size string) *OrderItemSchema {
	this := OrderItemSchema{}
	this.Product = product
	this.Size = size
	var quantity int64 = 1
	this.Quantity = &quantity
	return &this
}

// NewOrderItemSchemaWithDefaults instantiates a new OrderItemSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderItemSchemaWithDefaults() *OrderItemSchema {
	this := OrderItemSchema{}
	var quantity int64 = 1
	this.Quantity = &quantity
	return &this
}

// GetProduct returns the Product field value
func (o *OrderItemSchema) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *OrderItemSchema) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *OrderItemSchema) SetProduct(v string) {
	o.Product = v
}

// GetSize returns the Size field value
func (o *OrderItemSchema) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *OrderItemSchema) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *OrderItemSchema) SetSize(v string) {
	o.Size = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderItemSchema) GetQuantity() int64 {
	if o == nil || IsNil(o.Quantity) {
		var ret int64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderItemSchema) GetQuantityOk() (*int64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderItemSchema) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int64 and assigns it to the Quantity field.
func (o *OrderItemSchema) SetQuantity(v int64) {
	o.Quantity = &v
}

func (o OrderItemSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderItemSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["product"] = o.Product
	toSerialize["size"] = o.Size
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

func (o *OrderItemSchema) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderItemSchema := _OrderItemSchema{}

	err = json.Unmarshal(bytes, &varOrderItemSchema)

	if err != nil {
		return err
	}

	*o = OrderItemSchema(varOrderItemSchema)

	return err
}

type NullableOrderItemSchema struct {
	value *OrderItemSchema
	isSet bool
}

func (v NullableOrderItemSchema) Get() *OrderItemSchema {
	return v.value
}

func (v *NullableOrderItemSchema) Set(val *OrderItemSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderItemSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderItemSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderItemSchema(val *OrderItemSchema) *NullableOrderItemSchema {
	return &NullableOrderItemSchema{value: val, isSet: true}
}

func (v NullableOrderItemSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderItemSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


