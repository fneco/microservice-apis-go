/*
Orders API

API that allows you to manage orders for CoffeeMesh

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the GetOrderSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrderSchema{}

// GetOrderSchema struct for GetOrderSchema
type GetOrderSchema struct {
	Id string `json:"id"`
	Created time.Time `json:"created"`
	Status string `json:"status"`
	Order []OrderItemSchema `json:"order"`
}

type _GetOrderSchema GetOrderSchema

// NewGetOrderSchema instantiates a new GetOrderSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrderSchema(id string, created time.Time, status string, order []OrderItemSchema) *GetOrderSchema {
	this := GetOrderSchema{}
	this.Id = id
	this.Created = created
	this.Status = status
	this.Order = order
	return &this
}

// NewGetOrderSchemaWithDefaults instantiates a new GetOrderSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrderSchemaWithDefaults() *GetOrderSchema {
	this := GetOrderSchema{}
	return &this
}

// GetId returns the Id field value
func (o *GetOrderSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetOrderSchema) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetOrderSchema) SetId(v string) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *GetOrderSchema) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *GetOrderSchema) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *GetOrderSchema) SetCreated(v time.Time) {
	o.Created = v
}

// GetStatus returns the Status field value
func (o *GetOrderSchema) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetOrderSchema) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetOrderSchema) SetStatus(v string) {
	o.Status = v
}

// GetOrder returns the Order field value
func (o *GetOrderSchema) GetOrder() []OrderItemSchema {
	if o == nil {
		var ret []OrderItemSchema
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *GetOrderSchema) GetOrderOk() ([]OrderItemSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order, true
}

// SetOrder sets field value
func (o *GetOrderSchema) SetOrder(v []OrderItemSchema) {
	o.Order = v
}

func (o GetOrderSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrderSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	toSerialize["status"] = o.Status
	toSerialize["order"] = o.Order
	return toSerialize, nil
}

func (o *GetOrderSchema) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created",
		"status",
		"order",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetOrderSchema := _GetOrderSchema{}

	err = json.Unmarshal(bytes, &varGetOrderSchema)

	if err != nil {
		return err
	}

	*o = GetOrderSchema(varGetOrderSchema)

	return err
}

type NullableGetOrderSchema struct {
	value *GetOrderSchema
	isSet bool
}

func (v NullableGetOrderSchema) Get() *GetOrderSchema {
	return v.value
}

func (v *NullableGetOrderSchema) Set(val *GetOrderSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrderSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrderSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrderSchema(val *GetOrderSchema) *NullableGetOrderSchema {
	return &NullableGetOrderSchema{value: val, isSet: true}
}

func (v NullableGetOrderSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrderSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


