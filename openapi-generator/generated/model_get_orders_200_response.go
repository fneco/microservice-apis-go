/*
Orders API

API that allows you to manage orders for CoffeeMesh

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetOrders200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetOrders200Response{}

// GetOrders200Response struct for GetOrders200Response
type GetOrders200Response struct {
	Orders []GetOrderSchema `json:"orders,omitempty"`
}

// NewGetOrders200Response instantiates a new GetOrders200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetOrders200Response() *GetOrders200Response {
	this := GetOrders200Response{}
	return &this
}

// NewGetOrders200ResponseWithDefaults instantiates a new GetOrders200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetOrders200ResponseWithDefaults() *GetOrders200Response {
	this := GetOrders200Response{}
	return &this
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *GetOrders200Response) GetOrders() []GetOrderSchema {
	if o == nil || IsNil(o.Orders) {
		var ret []GetOrderSchema
		return ret
	}
	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetOrders200Response) GetOrdersOk() ([]GetOrderSchema, bool) {
	if o == nil || IsNil(o.Orders) {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *GetOrders200Response) HasOrders() bool {
	if o != nil && !IsNil(o.Orders) {
		return true
	}

	return false
}

// SetOrders gets a reference to the given []GetOrderSchema and assigns it to the Orders field.
func (o *GetOrders200Response) SetOrders(v []GetOrderSchema) {
	o.Orders = v
}

func (o GetOrders200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetOrders200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Orders) {
		toSerialize["orders"] = o.Orders
	}
	return toSerialize, nil
}

type NullableGetOrders200Response struct {
	value *GetOrders200Response
	isSet bool
}

func (v NullableGetOrders200Response) Get() *GetOrders200Response {
	return v.value
}

func (v *NullableGetOrders200Response) Set(val *GetOrders200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetOrders200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetOrders200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetOrders200Response(val *GetOrders200Response) *NullableGetOrders200Response {
	return &NullableGetOrders200Response{value: val, isSet: true}
}

func (v NullableGetOrders200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetOrders200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


